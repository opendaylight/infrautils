{
  "comments": [
    {
      "key": {
        "uuid": "45dd3e58_f7cf8c1a",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ClusterMemberInfoProvider.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-09-23T12:44:50Z",
      "side": 1,
      "message": "Instead of throwing an undocumented, unchecked ex, how about propagate the JMException?",
      "range": {
        "startLine": 40,
        "startChar": 22,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49a2e3d0_49dd7711",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ClusterMemberInfoProvider.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-09-23T15:01:13Z",
      "side": 1,
      "message": "I actually did think about that, here is why I did not do so:\n\nThe problem is that with https://git.opendaylight.org/gerrit/#/c/76345/ coming right after this it IMHO would not really make sense / actually be incorrect from a design point of view to have the new ClusterMemberInfo service interface have \"throw javax.management.JMException\" - because the fact that ClusterMemberInfoImpl implements ClusterMemberInfo uses JMX to spy into the controller is an implementation detail.  And one could well imagine implementing ClusterMemberInfo without JMX, say if we in the future we were to expose this more directly in controller.\n\nSo what we would then hvae to do is have to create a new ClusterMemberInfoException.  I considered that, but it seems stupid - this is not an expected case, we can only really hit this if controller does not register this MBean, or renames an attribute in it.  That should \"never\" happen - so a Runtime seemed fined to me for this.  As to which one I really don\u0027t care.  If you don\u0027t like the use of an IllegalStateException here, I\u0027m happy to use any other RuntimeException subclass, or even wrap it in a RuntimeException itself, if you prefer.  I had even checked and seen that there is a JMX runtime exception in the JDK, but it\u0027s stupid and we can\u0027t re-throw this as that because they forgot to make the constructor with the cause public!! :-(\n\nSo I would leave this as is.  What do you think?",
      "parentUuid": "45dd3e58_f7cf8c1a",
      "range": {
        "startLine": 40,
        "startChar": 22,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea716e2d_f886a95b",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ClusterMemberInfoProvider.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-09-23T16:16:18Z",
      "side": 1,
      "message": "The other option is to declare throws Exception which isn\u0027t ideal either but you\u0027re doing that with the other interface so it would be consistent. That would at least tell users that an impl can throw exceptions and might not be able to obtain the self address. We at least had an indication of the latter before in the interface using Optional. Either way it\u0027s not that big a deal - this won\u0027t be a widely used public interface anyway.",
      "parentUuid": "49a2e3d0_49dd7711",
      "range": {
        "startLine": 40,
        "startChar": 22,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab9fc7b1_0cbefa62",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ClusterMemberInfoProvider.java",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-09-24T08:27:30Z",
      "side": 1,
      "message": "\u003e other option is to declare throws Exception which isn\u0027t ideal either but you\u0027re doing that with the other interface so it would be consistent.\n\nyou mean the \"onSystemBootReady() throws Exception\" in https://git.opendaylight.org/gerrit/#/c/76364/ ? That\u0027s a a little different IMHO... that interface is implemented by many applications, and I want to take error handling offer their chest.  This interface is implemented by the platform, and only called by applications.\n\n\u003e That would at least tell users that an impl can throw exceptions and might not be able to obtain the self address\n\nIt\u0027s not an expected case, we can only really hit this if controller does not register this MBean, or renames an attribute in it.  That should \"never happen\". If it does, then things are so badly broken that a RuntimeException is OK IMHO.\n\n\u003e Either way it\u0027s not that big a deal - this won\u0027t be a widely used public interface anyway.\n\nOk, so... merge? ;-)  Or +1, ad give Faseela 48h, then I merge?",
      "parentUuid": "ea716e2d_f886a95b",
      "range": {
        "startLine": 40,
        "startChar": 22,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6e54257_2e4d1400",
        "filename": "diagstatus/impl/src/main/java/org/opendaylight/infrautils/diagstatus/internal/DiagStatusServiceMBeanImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-09-22T11:26:16Z",
      "side": 1,
      "message": "So this can now throw an ISE. Is this part of the onSystemBootReady API contract and do caller(s) expect it?",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd91156a_7ca6cc98",
        "filename": "diagstatus/impl/src/main/java/org/opendaylight/infrautils/diagstatus/internal/DiagStatusServiceMBeanImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-09-23T08:36:20Z",
      "side": 1,
      "message": "see https://git.opendaylight.org/gerrit/#/c/76364/ for INFRAUTILS-51 (and note how c/76364 changes this code)",
      "parentUuid": "c6e54257_2e4d1400",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7a1b1cf_b5c020e9",
        "filename": "diagstatus/impl/src/main/java/org/opendaylight/infrautils/diagstatus/internal/DiagStatusServiceMBeanImpl.java",
        "patchSetId": 3
      },
      "lineNbr": 71,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-09-23T12:44:50Z",
      "side": 1,
      "message": "ok",
      "parentUuid": "cd91156a_7ca6cc98",
      "range": {
        "startLine": 71,
        "startChar": 48,
        "endLine": 71,
        "endChar": 62
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed4d6838_c4322eae",
        "filename": "diagstatus/shell/src/main/java/org/opendaylight/infrautils/diagstatus/shell/DiagStatusCommand.java",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1842
      },
      "writtenOn": "2018-09-22T11:26:16Z",
      "side": 1,
      "message": "Again - this can now throw an ISE that would get propagated... desired behavior?",
      "range": {
        "startLine": 53,
        "startChar": 63,
        "endLine": 53,
        "endChar": 77
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e39e8f49_9f110519",
        "filename": "diagstatus/shell/src/main/java/org/opendaylight/infrautils/diagstatus/shell/DiagStatusCommand.java",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-09-23T08:36:20Z",
      "side": 1,
      "message": "in this case it\u0027s a CLI command, which would fail if this threw an ISE - IMHO that is the desired behavior, yes (this CLI command cannot work wihtout that).",
      "parentUuid": "ed4d6838_c4322eae",
      "range": {
        "startLine": 53,
        "startChar": 63,
        "endLine": 53,
        "endChar": 77
      },
      "revId": "d94bdc71bfd819421fc2d457ad0e932b75e3c3bd",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}