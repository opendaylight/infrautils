{
  "comments": [
    {
      "key": {
        "uuid": "9089aed5_554c6fa7",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ServiceDescriptor.java",
        "patchSetId": 13
      },
      "lineNbr": 42,
      "author": {
        "id": 817
      },
      "writtenOn": "2018-11-20T08:54:31Z",
      "side": 0,
      "message": "We are using Date() in one place and Instant here.. in the CLI output the overall timestamp and service specific timestamp is showing in two different formats, Hence unifying the same",
      "revId": "1ab29dad9df225211dba925837f28e9ed6a7e32d",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30595a0f_d67c620c",
        "filename": "diagstatus/api/src/main/java/org/opendaylight/infrautils/diagstatus/ServiceDescriptor.java",
        "patchSetId": 13
      },
      "lineNbr": 42,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-11-20T12:55:37Z",
      "side": 0,
      "message": "sure unifying the CLI output is fine, but changing the internal data type from Instant (or Date, doesn\u0027t matter so much) to String is not great... String is a formatted date; this formatting should happen in the \"consumer\" (CLI) not this data structure here, its getter should return an Instant (or Date, that\u0027s not the point; Instant is just better because more modern).",
      "parentUuid": "9089aed5_554c6fa7",
      "revId": "1ab29dad9df225211dba925837f28e9ed6a7e32d",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f18115f9_c62647cc",
        "filename": "diagstatus/impl/src/test/java/org/opendaylight/infrautils/diagstatus/test/DiagStatusTest.java",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 817
      },
      "writtenOn": "2018-11-20T08:57:49Z",
      "side": 0,
      "message": "gson omits attributes which are null automatically.. previously we were having empty string in the output, which is gone with the current implementation, and hence test started failing.",
      "revId": "1ab29dad9df225211dba925837f28e9ed6a7e32d",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e81edc76_ff0a3f30",
        "filename": "diagstatus/impl/src/test/java/org/opendaylight/infrautils/diagstatus/test/DiagStatusTest.java",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 5867
      },
      "writtenOn": "2018-11-20T12:55:37Z",
      "side": 0,
      "message": "hypothetically, something could have relied on that.  That was the point why a test seemed useful to me.  In an ideal world, you would make GSON not skip empty fields... according to https://futurestud.io/tutorials/gson-builder-force-serialization-of-null-values, this is as simple as gsonBuilder.serializeNulls();",
      "parentUuid": "f18115f9_c62647cc",
      "revId": "1ab29dad9df225211dba925837f28e9ed6a7e32d",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b31a64a7_aa4d3d19",
        "filename": "diagstatus/impl/src/test/java/org/opendaylight/infrautils/diagstatus/test/DiagStatusTest.java",
        "patchSetId": 13
      },
      "lineNbr": 51,
      "author": {
        "id": 817
      },
      "writtenOn": "2018-11-21T02:33:52Z",
      "side": 0,
      "message": "i felt it is better to reduce the size of the json, and hence did not use serializeNulls().. But if you think some external scripts are expecting this attribute always in the output, will add it back",
      "parentUuid": "e81edc76_ff0a3f30",
      "revId": "1ab29dad9df225211dba925837f28e9ed6a7e32d",
      "serverId": "7fc14799-209e-464c-9743-7a06c2c21a81",
      "unresolved": false
    }
  ]
}